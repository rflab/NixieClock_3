
nixie3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  000003dc  00000470  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003dc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  0080010c  0080010c  0000047c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000047c  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000098  00000000  00000000  000004ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000060a  00000000  00000000  00000544  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000270  00000000  00000000  00000b4e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002bb  00000000  00000000  00000dbe  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001c0  00000000  00000000  0000107c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002d5  00000000  00000000  0000123c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003ad  00000000  00000000  00001511  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000088  00000000  00000000  000018be  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3c 00 	jmp	0x78	; 0x78 <__ctors_end>
   4:	0c 94 13 01 	jmp	0x226	; 0x226 <__vector_1>
   8:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__vector_2>
   c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  10:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  14:	0c 94 52 01 	jmp	0x2a4	; 0x2a4 <__vector_5>
  18:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  1c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  20:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  24:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  28:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  2c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  30:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  34:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  38:	0c 94 99 00 	jmp	0x132	; 0x132 <__vector_14>
  3c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  40:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  44:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  48:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  4c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  50:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  54:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  58:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  5c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  60:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  64:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__bad_interrupt>
  68:	c3 00       	.word	0x00c3	; ????
  6a:	cb 00       	.word	0x00cb	; ????
  6c:	d3 00       	.word	0x00d3	; ????
  6e:	db 00       	.word	0x00db	; ????
  70:	e3 00       	.word	0x00e3	; ????
  72:	eb 00       	.word	0x00eb	; ????
  74:	f3 00       	.word	0x00f3	; ????
  76:	fb 00       	.word	0x00fb	; ????

00000078 <__ctors_end>:
  78:	11 24       	eor	r1, r1
  7a:	1f be       	out	0x3f, r1	; 63
  7c:	cf ef       	ldi	r28, 0xFF	; 255
  7e:	d8 e0       	ldi	r29, 0x08	; 8
  80:	de bf       	out	0x3e, r29	; 62
  82:	cd bf       	out	0x3d, r28	; 61

00000084 <__do_copy_data>:
  84:	11 e0       	ldi	r17, 0x01	; 1
  86:	a0 e0       	ldi	r26, 0x00	; 0
  88:	b1 e0       	ldi	r27, 0x01	; 1
  8a:	ec ed       	ldi	r30, 0xDC	; 220
  8c:	f3 e0       	ldi	r31, 0x03	; 3
  8e:	02 c0       	rjmp	.+4      	; 0x94 <__do_copy_data+0x10>
  90:	05 90       	lpm	r0, Z+
  92:	0d 92       	st	X+, r0
  94:	ac 30       	cpi	r26, 0x0C	; 12
  96:	b1 07       	cpc	r27, r17
  98:	d9 f7       	brne	.-10     	; 0x90 <__do_copy_data+0xc>

0000009a <__do_clear_bss>:
  9a:	21 e0       	ldi	r18, 0x01	; 1
  9c:	ac e0       	ldi	r26, 0x0C	; 12
  9e:	b1 e0       	ldi	r27, 0x01	; 1
  a0:	01 c0       	rjmp	.+2      	; 0xa4 <.do_clear_bss_start>

000000a2 <.do_clear_bss_loop>:
  a2:	1d 92       	st	X+, r1

000000a4 <.do_clear_bss_start>:
  a4:	a2 31       	cpi	r26, 0x12	; 18
  a6:	b2 07       	cpc	r27, r18
  a8:	e1 f7       	brne	.-8      	; 0xa2 <.do_clear_bss_loop>
  aa:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <main>
  ae:	0c 94 ec 01 	jmp	0x3d8	; 0x3d8 <_exit>

000000b2 <__bad_interrupt>:
  b2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b6 <led>:
//----------------------------

// LED
void led(bool on_)
{
	if (on_)
  b6:	88 23       	and	r24, r24
  b8:	11 f0       	breq	.+4      	; 0xbe <led+0x8>
		REG_LED |= MASK_LED;
  ba:	5c 9a       	sbi	0x0b, 4	; 11
  bc:	08 95       	ret
	else
		REG_LED &= ~MASK_LED;
  be:	5c 98       	cbi	0x0b, 4	; 11
  c0:	08 95       	ret

000000c2 <beep>:
// BEEP
void beep(int num_beep_)
{	
	int i = 0;

	for (i = 0; i < num_beep_; ++i)
  c2:	18 16       	cp	r1, r24
  c4:	19 06       	cpc	r1, r25
  c6:	dc f4       	brge	.+54     	; 0xfe <beep+0x3c>
  c8:	20 e0       	ldi	r18, 0x00	; 0
  ca:	30 e0       	ldi	r19, 0x00	; 0
	{
		REG_BEEP |= MASK_BEEP;
  cc:	2e 9a       	sbi	0x05, 6	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ce:	4f ef       	ldi	r20, 0xFF	; 255
  d0:	51 ee       	ldi	r21, 0xE1	; 225
  d2:	64 e0       	ldi	r22, 0x04	; 4
  d4:	41 50       	subi	r20, 0x01	; 1
  d6:	50 40       	sbci	r21, 0x00	; 0
  d8:	60 40       	sbci	r22, 0x00	; 0
  da:	e1 f7       	brne	.-8      	; 0xd4 <beep+0x12>
  dc:	00 c0       	rjmp	.+0      	; 0xde <beep+0x1c>
  de:	00 00       	nop
		_delay_ms(200);
		REG_BEEP &= ~MASK_BEEP;
  e0:	2e 98       	cbi	0x05, 6	; 5
  e2:	4f ef       	ldi	r20, 0xFF	; 255
  e4:	51 ee       	ldi	r21, 0xE1	; 225
  e6:	64 e0       	ldi	r22, 0x04	; 4
  e8:	41 50       	subi	r20, 0x01	; 1
  ea:	50 40       	sbci	r21, 0x00	; 0
  ec:	60 40       	sbci	r22, 0x00	; 0
  ee:	e1 f7       	brne	.-8      	; 0xe8 <beep+0x26>
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <beep+0x30>
  f2:	00 00       	nop
// BEEP
void beep(int num_beep_)
{	
	int i = 0;

	for (i = 0; i < num_beep_; ++i)
  f4:	2f 5f       	subi	r18, 0xFF	; 255
  f6:	3f 4f       	sbci	r19, 0xFF	; 255
  f8:	28 17       	cp	r18, r24
  fa:	39 07       	cpc	r19, r25
  fc:	39 f7       	brne	.-50     	; 0xcc <beep+0xa>
  fe:	8f ef       	ldi	r24, 0xFF	; 255
 100:	91 ee       	ldi	r25, 0xE1	; 225
 102:	24 e0       	ldi	r18, 0x04	; 4
 104:	81 50       	subi	r24, 0x01	; 1
 106:	90 40       	sbci	r25, 0x00	; 0
 108:	20 40       	sbci	r18, 0x00	; 0
 10a:	e1 f7       	brne	.-8      	; 0x104 <beep+0x42>
 10c:	00 c0       	rjmp	.+0      	; 0x10e <beep+0x4c>
 10e:	00 00       	nop
 110:	08 95       	ret

00000112 <ChangeDigit>:
// ニキシー管 / Nixie tube
// 現在表示桁の変更
// 繰り返しコールしてダイナミック点灯を行う
void ChangeDigit(e_digit digit_)
{
	setbits(REG_NIXIE_DIGIT, MASK_NIXIE_DIGIT, OFFSET_NIXIE_DIGIT, (char)digit_);
 112:	95 b1       	in	r25, 0x05	; 5
 114:	97 70       	andi	r25, 0x07	; 7
 116:	89 2b       	or	r24, r25
 118:	85 b9       	out	0x05, r24	; 5
 11a:	08 95       	ret

0000011c <ChangeNumber>:
// 現在表示桁を指定した値に変更
// 10~15は点灯せず
void ChangeNumber(unsigned char num_)
{
	static const unsigned char num2bit[] = {3, 4, 6, 9, 8, 1, 5, 0, 2, 7, 10};
	setbits(REG_NIXIE_DRIVER, MASK_NIXIE_DRIVER, OFFSET_NIXIE_DRIVER, num2bit[num_]);
 11c:	98 b1       	in	r25, 0x08	; 8
 11e:	e8 2f       	mov	r30, r24
 120:	f0 e0       	ldi	r31, 0x00	; 0
 122:	e0 50       	subi	r30, 0x00	; 0
 124:	ff 4f       	sbci	r31, 0xFF	; 255
 126:	89 2f       	mov	r24, r25
 128:	8f 70       	andi	r24, 0x0F	; 15
 12a:	90 81       	ld	r25, Z
 12c:	89 2b       	or	r24, r25
 12e:	88 b9       	out	0x08, r24	; 8
 130:	08 95       	ret

00000132 <__vector_14>:
//----------------------------
// interrupts
//----------------------------
// タイマ割り込み
ISR(TIMER0_COMPA_vect)
{
 132:	1f 92       	push	r1
 134:	0f 92       	push	r0
 136:	0f b6       	in	r0, 0x3f	; 63
 138:	0f 92       	push	r0
 13a:	11 24       	eor	r1, r1
 13c:	2f 93       	push	r18
 13e:	3f 93       	push	r19
 140:	4f 93       	push	r20
 142:	5f 93       	push	r21
 144:	6f 93       	push	r22
 146:	7f 93       	push	r23
 148:	8f 93       	push	r24
 14a:	9f 93       	push	r25
 14c:	af 93       	push	r26
 14e:	bf 93       	push	r27
 150:	ef 93       	push	r30
 152:	ff 93       	push	r31
	static unsigned char digit = 0;
	static unsigned char blank = 0;

	// blank期間なら全LEDをOFF
	blank = blank == 0 ? 1 : 0;
 154:	81 e0       	ldi	r24, 0x01	; 1
 156:	90 91 0d 01 	lds	r25, 0x010D
 15a:	91 11       	cpse	r25, r1
 15c:	80 e0       	ldi	r24, 0x00	; 0
 15e:	80 93 0d 01 	sts	0x010D, r24
	if (blank)
 162:	88 23       	and	r24, r24
 164:	21 f0       	breq	.+8      	; 0x16e <__vector_14+0x3c>
	{
		ChangeNumber(10); // 10は点灯せず
 166:	8a e0       	ldi	r24, 0x0A	; 10
 168:	0e 94 8e 00 	call	0x11c	; 0x11c <ChangeNumber>

		return;
 16c:	4b c0       	rjmp	.+150    	; 0x204 <__vector_14+0xd2>
	}
	
	// 表示LEDを切り替え
	digit++;
 16e:	80 91 0c 01 	lds	r24, 0x010C
 172:	8f 5f       	subi	r24, 0xFF	; 255
	digit &= 0x7;
 174:	87 70       	andi	r24, 0x07	; 7
 176:	80 93 0c 01 	sts	0x010C, r24
	switch (digit)
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	fc 01       	movw	r30, r24
 17e:	ec 5c       	subi	r30, 0xCC	; 204
 180:	ff 4f       	sbci	r31, 0xFF	; 255
 182:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <__tablejump2__>
	{
		case 0:
			ChangeDigit(DIGIT_0);
 186:	80 e0       	ldi	r24, 0x00	; 0
 188:	0e 94 89 00 	call	0x112	; 0x112 <ChangeDigit>
			ChangeNumber(number);
 18c:	80 91 10 01 	lds	r24, 0x0110
 190:	0e 94 8e 00 	call	0x11c	; 0x11c <ChangeNumber>
			break;
 194:	37 c0       	rjmp	.+110    	; 0x204 <__vector_14+0xd2>
		case 1:
			ChangeDigit(DIGIT_1);
 196:	81 e0       	ldi	r24, 0x01	; 1
 198:	0e 94 89 00 	call	0x112	; 0x112 <ChangeDigit>
			ChangeNumber(number);
 19c:	80 91 10 01 	lds	r24, 0x0110
 1a0:	0e 94 8e 00 	call	0x11c	; 0x11c <ChangeNumber>
			break;
 1a4:	2f c0       	rjmp	.+94     	; 0x204 <__vector_14+0xd2>
		case 2:
			ChangeDigit(DIGIT_COLON_L);
 1a6:	82 e0       	ldi	r24, 0x02	; 2
 1a8:	0e 94 89 00 	call	0x112	; 0x112 <ChangeDigit>
			ChangeNumber(number);
 1ac:	80 91 10 01 	lds	r24, 0x0110
 1b0:	0e 94 8e 00 	call	0x11c	; 0x11c <ChangeNumber>
			break;
 1b4:	27 c0       	rjmp	.+78     	; 0x204 <__vector_14+0xd2>
		case 3:
			ChangeDigit(DIGIT_2);
 1b6:	83 e0       	ldi	r24, 0x03	; 3
 1b8:	0e 94 89 00 	call	0x112	; 0x112 <ChangeDigit>
			ChangeNumber(number);
 1bc:	80 91 10 01 	lds	r24, 0x0110
 1c0:	0e 94 8e 00 	call	0x11c	; 0x11c <ChangeNumber>
			break;
 1c4:	1f c0       	rjmp	.+62     	; 0x204 <__vector_14+0xd2>
		case 4:
			ChangeDigit(DIGIT_3);
 1c6:	84 e0       	ldi	r24, 0x04	; 4
 1c8:	0e 94 89 00 	call	0x112	; 0x112 <ChangeDigit>
			ChangeNumber(number);
 1cc:	80 91 10 01 	lds	r24, 0x0110
 1d0:	0e 94 8e 00 	call	0x11c	; 0x11c <ChangeNumber>
			break;
 1d4:	17 c0       	rjmp	.+46     	; 0x204 <__vector_14+0xd2>
		case 5:
			ChangeDigit(DIGIT_COLON_R);
 1d6:	85 e0       	ldi	r24, 0x05	; 5
 1d8:	0e 94 89 00 	call	0x112	; 0x112 <ChangeDigit>
			ChangeNumber(number);
 1dc:	80 91 10 01 	lds	r24, 0x0110
 1e0:	0e 94 8e 00 	call	0x11c	; 0x11c <ChangeNumber>
			break;
 1e4:	0f c0       	rjmp	.+30     	; 0x204 <__vector_14+0xd2>
		case 6:
			ChangeDigit(DIGIT_4);
 1e6:	86 e0       	ldi	r24, 0x06	; 6
 1e8:	0e 94 89 00 	call	0x112	; 0x112 <ChangeDigit>
			ChangeNumber(number);
 1ec:	80 91 10 01 	lds	r24, 0x0110
 1f0:	0e 94 8e 00 	call	0x11c	; 0x11c <ChangeNumber>
			break;
 1f4:	07 c0       	rjmp	.+14     	; 0x204 <__vector_14+0xd2>
		case 7:
			ChangeDigit(DIGIT_5);
 1f6:	87 e0       	ldi	r24, 0x07	; 7
 1f8:	0e 94 89 00 	call	0x112	; 0x112 <ChangeDigit>
			ChangeNumber(number);
 1fc:	80 91 10 01 	lds	r24, 0x0110
 200:	0e 94 8e 00 	call	0x11c	; 0x11c <ChangeNumber>
			break;
		default:
			break;
	}
	return;
}
 204:	ff 91       	pop	r31
 206:	ef 91       	pop	r30
 208:	bf 91       	pop	r27
 20a:	af 91       	pop	r26
 20c:	9f 91       	pop	r25
 20e:	8f 91       	pop	r24
 210:	7f 91       	pop	r23
 212:	6f 91       	pop	r22
 214:	5f 91       	pop	r21
 216:	4f 91       	pop	r20
 218:	3f 91       	pop	r19
 21a:	2f 91       	pop	r18
 21c:	0f 90       	pop	r0
 21e:	0f be       	out	0x3f, r0	; 63
 220:	0f 90       	pop	r0
 222:	1f 90       	pop	r1
 224:	18 95       	reti

00000226 <__vector_1>:

// External interrupt 0
ISR(INT0_vect)
{
 226:	1f 92       	push	r1
 228:	0f 92       	push	r0
 22a:	0f b6       	in	r0, 0x3f	; 63
 22c:	0f 92       	push	r0
 22e:	11 24       	eor	r1, r1
 230:	2f 93       	push	r18
 232:	3f 93       	push	r19
 234:	4f 93       	push	r20
 236:	5f 93       	push	r21
 238:	6f 93       	push	r22
 23a:	7f 93       	push	r23
 23c:	8f 93       	push	r24
 23e:	9f 93       	push	r25
 240:	af 93       	push	r26
 242:	bf 93       	push	r27
 244:	ef 93       	push	r30
 246:	ff 93       	push	r31
	led(true);
 248:	81 e0       	ldi	r24, 0x01	; 1
 24a:	0e 94 5b 00 	call	0xb6	; 0xb6 <led>
	if (!num_up)
 24e:	80 91 0f 01 	lds	r24, 0x010F
 252:	81 11       	cpse	r24, r1
 254:	03 c0       	rjmp	.+6      	; 0x25c <__vector_1+0x36>
	{
		num_down = true;
 256:	81 e0       	ldi	r24, 0x01	; 1
 258:	80 93 0e 01 	sts	0x010E, r24
	}
}
 25c:	ff 91       	pop	r31
 25e:	ef 91       	pop	r30
 260:	bf 91       	pop	r27
 262:	af 91       	pop	r26
 264:	9f 91       	pop	r25
 266:	8f 91       	pop	r24
 268:	7f 91       	pop	r23
 26a:	6f 91       	pop	r22
 26c:	5f 91       	pop	r21
 26e:	4f 91       	pop	r20
 270:	3f 91       	pop	r19
 272:	2f 91       	pop	r18
 274:	0f 90       	pop	r0
 276:	0f be       	out	0x3f, r0	; 63
 278:	0f 90       	pop	r0
 27a:	1f 90       	pop	r1
 27c:	18 95       	reti

0000027e <__vector_2>:

// External interrupt 1
ISR(INT1_vect)
{
 27e:	1f 92       	push	r1
 280:	0f 92       	push	r0
 282:	0f b6       	in	r0, 0x3f	; 63
 284:	0f 92       	push	r0
 286:	11 24       	eor	r1, r1
 288:	8f 93       	push	r24
	if (!num_down)
 28a:	80 91 0e 01 	lds	r24, 0x010E
 28e:	81 11       	cpse	r24, r1
 290:	03 c0       	rjmp	.+6      	; 0x298 <__vector_2+0x1a>
	{
		num_up = true;
 292:	81 e0       	ldi	r24, 0x01	; 1
 294:	80 93 0f 01 	sts	0x010F, r24
	}
}
 298:	8f 91       	pop	r24
 29a:	0f 90       	pop	r0
 29c:	0f be       	out	0x3f, r0	; 63
 29e:	0f 90       	pop	r0
 2a0:	1f 90       	pop	r1
 2a2:	18 95       	reti

000002a4 <__vector_5>:

// PIN change interrupt
ISR(PCINT2_vect)
{
 2a4:	1f 92       	push	r1
 2a6:	0f 92       	push	r0
 2a8:	0f b6       	in	r0, 0x3f	; 63
 2aa:	0f 92       	push	r0
 2ac:	11 24       	eor	r1, r1
		{
			num_up = true;
		}
	}
	#endif
}
 2ae:	0f 90       	pop	r0
 2b0:	0f be       	out	0x3f, r0	; 63
 2b2:	0f 90       	pop	r0
 2b4:	1f 90       	pop	r1
 2b6:	18 95       	reti

000002b8 <setup>:
//----------------------------
// initialize
//----------------------------
void setup()
{
	MCUCR &= 0b11101111; // PUD = 0, intrrupt on
 2b8:	85 b7       	in	r24, 0x35	; 53
 2ba:	8f 7e       	andi	r24, 0xEF	; 239
 2bc:	85 bf       	out	0x35, r24	; 53

	// PIN (I/O, interrupt)
	{
		// port config
		DDRB   = 0b11111111; // 0~5が有効 0134:line direct(012:line decoder), 6:beep
 2be:	8f ef       	ldi	r24, 0xFF	; 255
 2c0:	84 b9       	out	0x04, r24	; 4
		DDRC   = 0b10001111; // 0~7が有効 0123:nixie_driver, 45:IIC, 6:reset
 2c2:	8f e8       	ldi	r24, 0x8F	; 143
 2c4:	87 b9       	out	0x07, r24	; 7
		DDRD   = 0b00010001; // 0~7が有効 0:rtc_oe, 1:rtc_out, 23:sw_AB, 5:remote, 6:焦電センサ(プルダウン内臓), 7:sw_push
 2c6:	81 e1       	ldi	r24, 0x11	; 17
 2c8:	8a b9       	out	0x0a, r24	; 10
		PORTB  = 0b00000000;
 2ca:	15 b8       	out	0x05, r1	; 5
		PORTC  = 0b00110000; // 45:IICプルアップ, 6:resetプルアップ
 2cc:	80 e3       	ldi	r24, 0x30	; 48
 2ce:	88 b9       	out	0x08, r24	; 8
		PORTD  = 0b10101111; // 6はセンサが内臓プルダウンなのでHiZ
 2d0:	8f ea       	ldi	r24, 0xAF	; 175
 2d2:	8b b9       	out	0x0b, r24	; 11
		
		// pin change interrupt
		PCMSK0 = 0b00000000;
 2d4:	10 92 6b 00 	sts	0x006B, r1
		PCMSK1 = 0b00000000;
 2d8:	10 92 6c 00 	sts	0x006C, r1
		PCMSK2 = 0b10000000; // 7:PCINT7
 2dc:	80 e8       	ldi	r24, 0x80	; 128
 2de:	80 93 6d 00 	sts	0x006D, r24
		PCICR  = 0b00000100; // PCINT2 enable
 2e2:	84 e0       	ldi	r24, 0x04	; 4
 2e4:	80 93 68 00 	sts	0x0068, r24
		
		// interrupt
		EICRA  = 0b00001010; // INT0, INT1立ち下がり検出
 2e8:	8a e0       	ldi	r24, 0x0A	; 10
 2ea:	80 93 69 00 	sts	0x0069, r24
		EIMSK  = 0b00000011; // INT0, INT1有効化
 2ee:	83 e0       	ldi	r24, 0x03	; 3
 2f0:	8d bb       	out	0x1d, r24	; 29
	// Timer
	// 8桁ニキシーを30Hz表示したい、ブランク時間を半分とする
	// マスタクロック8Mhz / 8 / 30 / 2 = 166666 (16.3 * 1024)回に一度割り込みでOK
	// 約2msで割り込みさせる
	{
		TIMSK0 = 0b0000010; // output compare A
 2f2:	ee e6       	ldi	r30, 0x6E	; 110
 2f4:	f0 e0       	ldi	r31, 0x00	; 0
 2f6:	82 e0       	ldi	r24, 0x02	; 2
 2f8:	80 83       	st	Z, r24

		// CTC, 1024分周prescaler入力
		TCCR0A = 0b00000010;
 2fa:	84 bd       	out	0x24, r24	; 36
		TCCR0B = 0b00000101;
 2fc:	95 e0       	ldi	r25, 0x05	; 5
 2fe:	95 bd       	out	0x25, r25	; 37
		
		// 16でリセット
		OCR0A  = 8; // 暫定で16→8
 300:	98 e0       	ldi	r25, 0x08	; 8
 302:	97 bd       	out	0x27, r25	; 39
		
		// Compare Match A Interrupt Enable
		TIMSK0 = 0b00000010;
 304:	80 83       	st	Z, r24
		// ADIE     A/D変換完了割り込み許可
		// ADPS2〜0 A/D変換ｸﾛｯｸ選択
	}

	// 割り込み有効化アセンブラ命令コール
	sei();
 306:	78 94       	sei
 308:	08 95       	ret

0000030a <loop>:
//----------------------------

// loop
void loop()
{	
	if ((PIND & 0b10000000) == 0)
 30a:	4f 99       	sbic	0x09, 7	; 9
 30c:	08 c0       	rjmp	.+16     	; 0x31e <loop+0x14>
	{
		number = 0;
 30e:	10 92 11 01 	sts	0x0111, r1
 312:	10 92 10 01 	sts	0x0110, r1
		beep(1);
 316:	81 e0       	ldi	r24, 0x01	; 1
 318:	90 e0       	ldi	r25, 0x00	; 0
 31a:	0e 94 61 00 	call	0xc2	; 0xc2 <beep>
	}
	
	
	if (num_up)
 31e:	80 91 0f 01 	lds	r24, 0x010F
 322:	88 23       	and	r24, r24
 324:	d9 f0       	breq	.+54     	; 0x35c <loop+0x52>
	{
		++number;
 326:	80 91 10 01 	lds	r24, 0x0110
 32a:	90 91 11 01 	lds	r25, 0x0111
 32e:	01 96       	adiw	r24, 0x01	; 1
		if (number > 9)
 330:	8a 30       	cpi	r24, 0x0A	; 10
 332:	91 05       	cpc	r25, r1
 334:	2c f4       	brge	.+10     	; 0x340 <loop+0x36>
	}
	
	
	if (num_up)
	{
		++number;
 336:	90 93 11 01 	sts	0x0111, r25
 33a:	80 93 10 01 	sts	0x0110, r24
 33e:	04 c0       	rjmp	.+8      	; 0x348 <loop+0x3e>
		if (number > 9)
		{
			number = 0;
 340:	10 92 11 01 	sts	0x0111, r1
 344:	10 92 10 01 	sts	0x0110, r1
 348:	2f ef       	ldi	r18, 0xFF	; 255
 34a:	81 ee       	ldi	r24, 0xE1	; 225
 34c:	94 e0       	ldi	r25, 0x04	; 4
 34e:	21 50       	subi	r18, 0x01	; 1
 350:	80 40       	sbci	r24, 0x00	; 0
 352:	90 40       	sbci	r25, 0x00	; 0
 354:	e1 f7       	brne	.-8      	; 0x34e <loop+0x44>
 356:	00 c0       	rjmp	.+0      	; 0x358 <loop+0x4e>
 358:	00 00       	nop
 35a:	1f c0       	rjmp	.+62     	; 0x39a <loop+0x90>
		}
		_delay_ms(200);
	}
	else if (num_down)
 35c:	80 91 0e 01 	lds	r24, 0x010E
 360:	88 23       	and	r24, r24
 362:	d9 f0       	breq	.+54     	; 0x39a <loop+0x90>
	{
		--number;
 364:	80 91 10 01 	lds	r24, 0x0110
 368:	90 91 11 01 	lds	r25, 0x0111
 36c:	01 97       	sbiw	r24, 0x01	; 1
		if (number < 0)
 36e:	99 23       	and	r25, r25
 370:	2c f0       	brlt	.+10     	; 0x37c <loop+0x72>
		}
		_delay_ms(200);
	}
	else if (num_down)
	{
		--number;
 372:	90 93 11 01 	sts	0x0111, r25
 376:	80 93 10 01 	sts	0x0110, r24
 37a:	06 c0       	rjmp	.+12     	; 0x388 <loop+0x7e>
		if (number < 0)
		{
			number = 9;
 37c:	89 e0       	ldi	r24, 0x09	; 9
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	90 93 11 01 	sts	0x0111, r25
 384:	80 93 10 01 	sts	0x0110, r24
 388:	2f ef       	ldi	r18, 0xFF	; 255
 38a:	81 ee       	ldi	r24, 0xE1	; 225
 38c:	94 e0       	ldi	r25, 0x04	; 4
 38e:	21 50       	subi	r18, 0x01	; 1
 390:	80 40       	sbci	r24, 0x00	; 0
 392:	90 40       	sbci	r25, 0x00	; 0
 394:	e1 f7       	brne	.-8      	; 0x38e <loop+0x84>
 396:	00 c0       	rjmp	.+0      	; 0x398 <loop+0x8e>
 398:	00 00       	nop
		}
		_delay_ms(200);
	}
	num_up = false;
 39a:	10 92 0f 01 	sts	0x010F, r1
	num_down = false;
 39e:	10 92 0e 01 	sts	0x010E, r1
	
	
	if (chkbit(PIND, PIND6))
 3a2:	4e 9b       	sbis	0x09, 6	; 9
 3a4:	04 c0       	rjmp	.+8      	; 0x3ae <loop+0xa4>
	{
		led(true);
 3a6:	81 e0       	ldi	r24, 0x01	; 1
 3a8:	0e 94 5b 00 	call	0xb6	; 0xb6 <led>
 3ac:	03 c0       	rjmp	.+6      	; 0x3b4 <loop+0xaa>
	}
	else
	{
		led(false);
 3ae:	80 e0       	ldi	r24, 0x00	; 0
 3b0:	0e 94 5b 00 	call	0xb6	; 0xb6 <led>
 3b4:	8f e3       	ldi	r24, 0x3F	; 63
 3b6:	9c e9       	ldi	r25, 0x9C	; 156
 3b8:	01 97       	sbiw	r24, 0x01	; 1
 3ba:	f1 f7       	brne	.-4      	; 0x3b8 <loop+0xae>
 3bc:	00 c0       	rjmp	.+0      	; 0x3be <loop+0xb4>
 3be:	00 00       	nop
 3c0:	08 95       	ret

000003c2 <main>:
}

// main
int main(void)
{
	setup();
 3c2:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <setup>
	
	while(1)
	{
		loop();
 3c6:	0e 94 85 01 	call	0x30a	; 0x30a <loop>
 3ca:	fd cf       	rjmp	.-6      	; 0x3c6 <main+0x4>

000003cc <__tablejump2__>:
 3cc:	ee 0f       	add	r30, r30
 3ce:	ff 1f       	adc	r31, r31

000003d0 <__tablejump__>:
 3d0:	05 90       	lpm	r0, Z+
 3d2:	f4 91       	lpm	r31, Z
 3d4:	e0 2d       	mov	r30, r0
 3d6:	09 94       	ijmp

000003d8 <_exit>:
 3d8:	f8 94       	cli

000003da <__stop_program>:
 3da:	ff cf       	rjmp	.-2      	; 0x3da <__stop_program>
